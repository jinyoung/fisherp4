To implement the given event storming model using the specified architecture and technologies, we will need to create a Spring Boot application with several layers following the Clean Architecture principles. We will use JPA for data persistence, H2 as the in-memory database, Lombok to reduce boilerplate code, Kafka with spring-cloud-streams for event messaging, and JUnit for testing.

Here are the core classes, functions, and methods that will be necessary:

- `Purchase` (Aggregate Root): Represents the purchase entity with all the fields described in the event storming model.
- `PurchaseDetail` (Entity): Represents the details of each purchase.
- `AccountId` (Value Object): Represents the ID of the account associated with the purchase.
- `PurchaseRepository` (Interface): Defines the contract for the repository that will handle persistence operations for `Purchase`.
- `PurchaseService` (Class): Contains business logic to handle commands and produce events.
- `PurchaseController` (Class): REST controller to handle incoming HTTP requests.
- `PurchaseCreated` (Event): Represents the event that is published when a purchase is created.
- `FishSold` (Event): Represents the event that is published when fish are sold.
- `CreatePurchaseCommand` (Command): Represents the command to create a purchase.
- `SaleCommand` (Command): Represents the command to record a sale.
- `PurchaseEventSource` (Class): Handles the publishing of events to Kafka.
- `PurchaseEventListener` (Class): Handles the consumption of events from Kafka.
- `Application` (Class): The main entry point of the Spring Boot application.

Let's start with the entry point of the application and then proceed to the other files.

src/main/java/com/example/purchase/Application.java
```java
package com.example.purchase;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

Next, we will define the domain model, starting with the `Purchase` aggregate root.

src/main/java/com/example/purchase/domain/Purchase.java
```java
package com.example.purchase.domain;

import lombok.*;
import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Purchase {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long purchaseNo;

    private String purchaseType;
    private LocalDate purchaseDate;
    private LocalDate warehouseArrivalDate;
    private LocalDate storageFeePaymentDate;
    private Boolean storageFeePaymentStatus;
    private String mainShipName;
    private String productName;

    @Embedded
    private AccountId accountId;

    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
    private List<PurchaseDetail> purchaseDetails;
}
```

src/main/java/com/example/purchase/domain/PurchaseDetail.java
```java
package com.example.purchase.domain;

import lombok.*;
import jakarta.persistence.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PurchaseDetail {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Additional fields and relationships can be defined here
}
```

src/main/java/com/example/purchase/domain/AccountId.java
```java
package com.example.purchase.domain;

import lombok.*;

import jakarta.persistence.Embeddable;

@Embeddable
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class AccountId {
    private String accountId;
}
```

Now, let's define the repository interface.

src/main/java/com/example/purchase/repository/PurchaseRepository.java
```java
package com.example.purchase.repository;

import com.example.purchase.domain.Purchase;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PurchaseRepository extends JpaRepository<Purchase, Long> {
}
```

Next, we will create the service layer.

src/main/java/com/example/purchase/service/PurchaseService.java
```java
package com.example.purchase.service;

import com.example.purchase.domain.Purchase;
import com.example.purchase.repository.PurchaseRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PurchaseService {
    private final PurchaseRepository purchaseRepository;

    @Autowired
    public PurchaseService(PurchaseRepository purchaseRepository) {
        this.purchaseRepository = purchaseRepository;
    }

    // Business logic for handling commands and producing events will be added here
}
```

We will also need a REST controller to handle incoming HTTP requests.

src/main/java/com/example/purchase/controller/PurchaseController.java
```java
package com.example.purchase.controller;

import com.example.purchase.service.PurchaseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/purchases")
public class PurchaseController {
    private final PurchaseService purchaseService;

    @Autowired
    public PurchaseController(PurchaseService purchaseService) {
        this.purchaseService = purchaseService;
    }

    // Endpoints for creating a purchase and recording a sale will be added here
}
```

Next, we will define the events.

src/main/java/com/example/purchase/events/PurchaseCreated.java
```java
package com.example.purchase.events;

import lombok.*;

import java.time.LocalDate;

@Data
@Builder
public class PurchaseCreated {
    private String purchaseType;
    private LocalDate purchaseDate;
    private LocalDate warehouseArrivalDate;
    private LocalDate storageFeePaymentDate;
    private Boolean storageFeePaymentStatus;
    private String mainShipName;
    private String productName;
    private String accountId;
    private List<PurchaseDetail> purchaseDetails;
}
```

src/main/java/com/example/purchase/events/FishSold.java
```java
package com.example.purchase.events;

import lombok.*;

@Data
@Builder
public class FishSold {
    private String itemId;
    private Integer stock;
}
```

Now, let's define the commands.

src/main/java/com/example/purchase/commands/CreatePurchaseCommand.java
```java
package com.example.purchase.commands;

import lombok.*;

@Data
public class CreatePurchaseCommand {
    // Fields corresponding to the command's data will be added here
}
```

src/main/java/com/example/purchase/commands/SaleCommand.java
```java
package com.example.purchase.commands;

import lombok.*;

@Data
public class SaleCommand {
    private String itemId;
    private Integer qty;
}
```

We will also need to set up Kafka event sourcing.

src/main/java/com/example/purchase/kafka/PurchaseEventSource.java
```java
package com.example.purchase.kafka;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
@EnableBinding(Source.class)
public class PurchaseEventSource {
    private final Source source;

    @Autowired
    public PurchaseEventSource(Source source) {
        this.source = source;
    }

    public void publishPurchaseCreated(PurchaseCreated event) {
        source.output().send(MessageBuilder.withPayload(event).build());
    }

    public void publishFishSold(FishSold event) {
        source.output().send(MessageBuilder.withPayload(event).build());
    }
}
```

src/main/java/com/example/purchase/kafka/PurchaseEventListener.java
```java
package com.example.purchase.kafka;

import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.stereotype.Component;

@Component
@EnableBinding(Sink.class)
public class PurchaseEventListener {

    @StreamListener(Sink.INPUT)
    public void handlePurchaseCreated(PurchaseCreated event) {
        // Logic to handle the PurchaseCreated event
    }

    @StreamListener(Sink.INPUT)
    public void handleFishSold(FishSold event) {
        // Logic to handle the FishSold event
    }
}
```

Finally, we need to create the configuration files for the application.

src/main/resources/application.properties
```
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

spring.cloud.stream.kafka.binder.brokers=localhost:9092
spring.cloud.stream.bindings.output.destination=purchase-events
spring.cloud.stream.bindings.input.destination=purchase-events
```

We also need to add the Maven `pom.xml` file to define the project dependencies.

pom.xml
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>purchase</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>11</java.version>
        <spring-boot.version>3.0.0</spring-boot.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>4.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
            <version>4.0.0</version>
        </dependency>

        <!-- H2 Database -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>

        <!-- Jakarta Persistence API -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.0.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
            </plugin>
        </plugins>
    </build>
</project>
```

This concludes a fully working implementation.